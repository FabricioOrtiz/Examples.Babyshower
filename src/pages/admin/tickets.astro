---
// Admin page to manage all tickets
import Layout from '../../layouts/Layout.astro';
import { ticketTypes } from '../../data/tickets.js';

// Get ticket data
const tickets = ticketTypes;
---

<Layout title="Admin - Ticket Management">
  <section class="py-12 bg-gray-50">
    <div class="container mx-auto px-4">
      <div class="flex flex-col md:flex-row justify-between items-center mb-8">
        <h1 class="text-3xl font-bold">Ticket Management</h1>
        <div class="flex space-x-4 mt-4 md:mt-0">
          <a 
            href="/" 
            class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors"
          >
            Back to Home
          </a>
          <button 
            id="add-ticket-btn"
            class="bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
          >
            Add New Ticket
          </button>
        </div>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow-md p-6">
          <h3 class="text-lg font-medium text-gray-500 mb-2">Total Sales</h3>
          <p id="total-sales" class="text-3xl font-bold">$0</p>
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6">
          <h3 class="text-lg font-medium text-gray-500 mb-2">Tickets Sold</h3>
          <p id="total-tickets" class="text-3xl font-bold">0</p>
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6">
          <h3 class="text-lg font-medium text-gray-500 mb-2">Ticket Types</h3>
          <p class="text-3xl font-bold">{tickets.length}</p>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="p-6 border-b border-gray-200">
          <h2 class="text-xl font-bold">All Ticket Holders</h2>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ticket Type</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody id="admin-table-body" class="bg-white divide-y divide-gray-200">
              <!-- Table will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </section>

  <!-- Add/Edit Ticket Popup -->
  <div id="admin-ticket-popup" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-xl shadow-xl max-w-md w-full p-6 max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 id="popup-title" class="text-2xl font-bold">Add New Ticket</h3>
        <button id="close-admin-popup" class="text-gray-500 hover:text-gray-700">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <form id="admin-ticket-form" class="space-y-4">
        <input type="hidden" id="admin-user-id" name="userId" value="">
        
        <div class="space-y-2">
          <label for="admin-name" class="block font-medium">Customer Name</label>
          <input 
            type="text" 
            id="admin-name" 
            name="name" 
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            required
          >
        </div>
        
        <div class="space-y-2">
          <label for="admin-email" class="block font-medium">Email</label>
          <input 
            type="email" 
            id="admin-email" 
            name="email" 
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            required
          >
        </div>
        
        <div class="space-y-2">
          <label for="admin-ticket-type" class="block font-medium">Ticket Type</label>
          <select 
            id="admin-ticket-type" 
            name="ticketId" 
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            required
          >
            <option value="">Select a ticket type</option>
            {tickets.map(ticket => (
              <option value={ticket.id}>{ticket.name} - ${ticket.price}</option>
            ))}
          </select>
        </div>
        
        <div class="space-y-2">
          <label for="admin-quantity" class="block font-medium">Number of Tickets</label>
          <input 
            type="number" 
            id="admin-quantity" 
            name="numberOfTickets" 
            min="1" 
            max="10" 
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            required
          >
        </div>
        
        <div class="pt-2">
          <button 
            type="submit" 
            class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-4 rounded-lg transition-colors"
          >
            Save Ticket
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-xl shadow-xl max-w-md w-full p-6">
      <h3 class="text-xl font-bold mb-4">Confirm Deletion</h3>
      <p class="mb-6">Are you sure you want to delete this ticket? This action cannot be undone.</p>
      
      <div class="flex space-x-4">
        <button id="cancel-delete" class="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors">
          Cancel
        </button>
        <button id="confirm-delete" class="flex-1 bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
          Delete
        </button>
      </div>
    </div>
  </div>

  <script define:vars={{ tickets }}>
    // Client-side script for admin functionality
    document.addEventListener('DOMContentLoaded', () => {
      // Elements
      const adminPopup = document.getElementById('admin-ticket-popup');
      const closeAdminBtn = document.getElementById('close-admin-popup');
      const adminForm = document.getElementById('admin-ticket-form');
      const addTicketBtn = document.getElementById('add-ticket-btn');
      const popupTitle = document.getElementById('popup-title');
      const userIdInput = document.getElementById('admin-user-id');
      const nameInput = document.getElementById('admin-name');
      const emailInput = document.getElementById('admin-email');
      const ticketTypeInput = document.getElementById('admin-ticket-type');
      const quantityInput = document.getElementById('admin-quantity');
      const tableBody = document.getElementById('admin-table-body');
      const totalSalesElement = document.getElementById('total-sales');
      const totalTicketsElement = document.getElementById('total-tickets');
      
      const deleteModal = document.getElementById('delete-modal');
      const cancelDeleteBtn = document.getElementById('cancel-delete');
      const confirmDeleteBtn = document.getElementById('confirm-delete');
      
      let currentDeleteId = null;
      
      // Get ticket users from localStorage or use initial data
      function getTicketUsers() {
        const storedUsers = localStorage.getItem('ticketUsers');
        return storedUsers ? JSON.parse(storedUsers) : [
          { id: 1, name: "Familia Ortiz Alfaro", email: "N/a", numberOfTickets: 4, ticketId: 1 },
        { id: 2, name: "Familia Quesada Alfaro", email: "N/a", numberOfTickets: 8, ticketId: 1 },
        { id: 3, name: "Familia Ramírez Alfaro", email: "N/a", numberOfTickets: 6, ticketId: 1 },
        { id: 4, name: "Familia Córdoba Alfaro ", email: "N/a", numberOfTickets: 3, ticketId: 1 },
        { id: 5, name: "Familia Alfaro Ramírez", email: "N/a", numberOfTickets: 3, ticketId: 1 },
        { id: 6, name: "Leo y Laura", email: "N/a", numberOfTickets: 2, ticketId: 1 },
        { id: 7, name: "Familia Dunia", email: "N/a", numberOfTickets: 5, ticketId: 1 },
        { id: 8, name: "Familia Ortiz (Santos) ", email: "N/a", numberOfTickets: 4, ticketId: 1 },
        { id: 9, name: "Abuelo Lalo y Abuela Odili", email: "N/a", numberOfTickets: 2, ticketId: 1 },
        { id: 10, name: "Familia Garro", email: "N/a", numberOfTickets: 14, ticketId: 1 },

        { id: 11, name: "Johnny y Yasmin", email: "N/a", numberOfTickets: 3, ticketId: 1 },
        { id: 12, name: "Aura y Mary Fer", email: "N/a", numberOfTickets: 2, ticketId: 1 },
        { id: 13, name: "Will Y Vivi ", email: "N/a", numberOfTickets: 4, ticketId: 1 },
        { id: 14, name: "Familia Katy", email: "N/a", numberOfTickets: 2, ticketId: 1 },
        { id: 15, name: "Anthony y Gene", email: "N/a", numberOfTickets: 2, ticketId: 1 },
        { id: 16, name: "Amig@", email: "N/a", numberOfTickets: 1, ticketId: 1 }
        ];
      }
      
      // Save ticket users to localStorage
      function saveTicketUsers(users) {
        localStorage.setItem('ticketUsers', JSON.stringify(users));
        return users;
      }
      
      // Function to render the admin table
      function renderAdminTable() {
        if (!tableBody) return;
        
        // Get the latest data
        const ticketUsers = getTicketUsers();
        
        // Clear the table
        tableBody.innerHTML = '';
        
        // Add each user to the table
        ticketUsers.forEach(user => {
          const ticket = tickets.find(t => t.id === user.ticketId);
          const total = ticket ? ticket.price * user.numberOfTickets : 0;
          
          const row = document.createElement('tr');
          row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.id}</td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900">${user.name}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-500">${user.email}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              ${ticket ? ticket.name : `Ticket ${user.ticketId}`}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.numberOfTickets}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">$${total}</td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <div class="flex justify-end space-x-2">
                <button 
                  class="text-indigo-600 hover:text-indigo-900 edit-btn" 
                  data-user-id="${user.id}"
                >
                  Edit
                </button>
                <button 
                  class="text-red-600 hover:text-red-900 delete-btn" 
                  data-user-id="${user.id}"
                >
                  Delete
                </button>
              </div>
            </td>
          `;
          
          tableBody.appendChild(row);
        });
        
        // Update the edit and delete buttons
        document.querySelectorAll('.edit-btn').forEach(button => {
          button.addEventListener('click', () => {
            const userId = parseInt(button.getAttribute('data-user-id'));
            const user = getTicketUsers().find(u => u.id === userId);
            if (user) {
              openAdminPopup(user);
            }
          });
        });
        
        document.querySelectorAll('.delete-btn').forEach(button => {
          button.addEventListener('click', () => {
            const userId = parseInt(button.getAttribute('data-user-id'));
            currentDeleteId = userId;
            deleteModal.classList.remove('hidden');
          });
        });
        
        // Update the summary statistics
        updateSummaryStats();
      }
      
      // Function to update summary statistics
      function updateSummaryStats() {
        const ticketUsers = getTicketUsers();
        
        // Calculate total sales
        const totalSales = ticketUsers.reduce((total, user) => {
          const ticket = tickets.find(t => t.id === user.ticketId);
          return total + (ticket ? ticket.price * user.numberOfTickets : 0);
        }, 0);
        
        // Calculate total tickets sold
        const totalTickets = ticketUsers.reduce((total, user) => total + user.numberOfTickets, 0);
        
        // Update the UI
        if (totalSalesElement) totalSalesElement.textContent = `$${totalSales.toLocaleString()}`;
        if (totalTicketsElement) totalTicketsElement.textContent = totalTickets.toString();
      }
      
      // Render the table on page load
      renderAdminTable();
      
      // Add new ticket button
      addTicketBtn.addEventListener('click', () => {
        openAdminPopup();
      });
      
      // Close admin popup
      closeAdminBtn.addEventListener('click', () => {
        adminPopup.classList.add('hidden');
      });
      
      // Handle admin form submission
      adminForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const formData = {
          name: nameInput.value,
          email: emailInput.value,
          ticketId: parseInt(ticketTypeInput.value),
          numberOfTickets: parseInt(quantityInput.value)
        };
        
        const userId = userIdInput.value ? parseInt(userIdInput.value) : null;
        const ticketUsers = getTicketUsers();
        
        if (userId) {
          // Update existing ticket
          const userIndex = ticketUsers.findIndex(user => user.id === userId);
          if (userIndex !== -1) {
            ticketUsers[userIndex] = { ...ticketUsers[userIndex], ...formData };
            saveTicketUsers(ticketUsers);
            showSuccessMessage('Ticket updated successfully!');
          }
        } else {
          // Add new ticket
          const newId = ticketUsers.length > 0 ? Math.max(...ticketUsers.map(u => u.id)) + 1 : 1;
          ticketUsers.push({ id: newId, ...formData });
          saveTicketUsers(ticketUsers);
          showSuccessMessage('New ticket added successfully!');
        }
        
        // Close the popup
        adminPopup.classList.add('hidden');
        
        // Refresh the table
        renderAdminTable();
      });
      
      // Cancel delete
      cancelDeleteBtn.addEventListener('click', () => {
        deleteModal.classList.add('hidden');
        currentDeleteId = null;
      });
      
      // Confirm delete
      confirmDeleteBtn.addEventListener('click', () => {
        if (currentDeleteId) {
          // Delete the user
          const ticketUsers = getTicketUsers();
          const filteredUsers = ticketUsers.filter(user => user.id !== currentDeleteId);
          saveTicketUsers(filteredUsers);
          
          // Show success message
          showSuccessMessage('Ticket deleted successfully!');
          
          // Close the modal
          deleteModal.classList.add('hidden');
          currentDeleteId = null;
          
          // Refresh the table
          renderAdminTable();
        }
      });
      
      // Function to open admin popup
      function openAdminPopup(userData = null) {
        // Reset form
        adminForm.reset();
        userIdInput.value = '';
        
        if (userData) {
          // Edit existing ticket
          popupTitle.textContent = 'Edit Ticket';
          userIdInput.value = userData.id;
          nameInput.value = userData.name;
          emailInput.value = userData.email;
          ticketTypeInput.value = userData.ticketId;
          quantityInput.value = userData.numberOfTickets;
        } else {
          // Add new ticket
          popupTitle.textContent = 'Add New Ticket';
        }
        
        // Show popup
        adminPopup.classList.remove('hidden');
      }
      
      // Show success message
      function showSuccessMessage(message) {
        const successMessage = document.createElement('div');
        successMessage.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
        successMessage.textContent = message;
        
        document.body.appendChild(successMessage);
        
        setTimeout(() => {
          successMessage.remove();
        }, 3000);
      }
    });
  </script>
</Layout>

