---
// Ticket component for purchasing concert tickets
import TicketPopup from './TicketPopup.astro';
import { ticketTypes } from '../data/tickets.js';

// Get ticket data
const tickets = ticketTypes;
---



<TicketPopup />

<script>
  type User = {
  ticketId: number;
  name: string;
  email: string;
  numberOfTickets: number;
};
  // Client-side script for ticket popup functionality
  document.addEventListener('DOMContentLoaded', () => {
    const popup = document.getElementById('ticket-popup');
    const closeBtn = document.getElementById('close-popup');
    const ticketForm = document.getElementById('ticket-form');
    const ticketIdInput = document.getElementById('ticket-id') as HTMLInputElement;
    const nameInput = document.getElementById('name') as HTMLInputElement | null;
    const emailInput = document.getElementById('email') as HTMLInputElement | null;
    const numberOfTicketsInput = document.getElementById('numberOfTicketsInput') as HTMLInputElement | null;
    const numberOfTickets = document.getElementById('numberOfTickets') as HTMLLIElement;
    const nameOfFamily = document.getElementById('nameOfFamily') as HTMLElement;
    const buyButtons = document.querySelectorAll('.buy-ticket-btn');
    
    // Get ticket users from localStorage or use initial data
    function getTicketUsers() {
      const storedUsers = localStorage.getItem('ticketUsers');
      return  [
      { id: 1, name: "Familia Ortiz Alfaro", email: "test@test.com", numberOfTickets: 4, ticketId: 1 },
        { id: 2, name: "Familia Quesada Alfaro", email: "test@test.com", numberOfTickets: 8, ticketId: 1 },
        { id: 3, name: "Familia Ramírez Alfaro", email: "test@test.com", numberOfTickets: 6, ticketId: 1 },
        { id: 4, name: "Familia Córdoba Alfaro ", email: "test@test.com", numberOfTickets: 3, ticketId: 1 },
        { id: 5, name: "Familia Alfaro Ramírez", email: "test@test.com", numberOfTickets: 3, ticketId: 1 },
        { id: 6, name: "Leo y Laura", email: "test@test.com", numberOfTickets: 2, ticketId: 1 },
        { id: 7, name: "Familia Dunia", email: "test@test.com", numberOfTickets: 5, ticketId: 1 },
        { id: 8, name: "Familia Ortiz (Santos) ", email: "test@test.com", numberOfTickets: 4, ticketId: 1 },
        { id: 9, name: "Abuelo Lalo y Abuela Odili", email: "test@test.com", numberOfTickets: 2, ticketId: 1 },
        { id: 10, name: "Familia Garro", email: "test@test.com", numberOfTickets: 14, ticketId: 1 },

        { id: 11, name: "Johnny y Yasmin", email: "test@test.com", numberOfTickets: 3, ticketId: 1 },
        { id: 12, name: "Aura y Mary Fer", email: "test@test.com", numberOfTickets: 2, ticketId: 1 },
        { id: 13, name: "Will Y Vivi ", email: "test@test.com", numberOfTickets: 4, ticketId: 1 },
        { id: 14, name: "Familia Katy", email: "test@test.com", numberOfTickets: 2, ticketId: 1 },
        { id: 15, name: "Anthony y Gene", email: "test@test.com", numberOfTickets: 2, ticketId: 1 },
        { id: 16, name: "Amig@", email: "test@test.com", numberOfTickets: 1, ticketId: 1 }
      ];
    }
    
    // Save ticket users to localStorage
    function saveTicketUsers(users: User) {
      localStorage.setItem('ticketUsers', JSON.stringify(users));
      return users;
    }
    
    // Get initial ticket users
    let ticketUsersArray = getTicketUsers();
    
    // Check URL parameters on page load
    function checkUrlParams() {
      const urlParams = new URLSearchParams(window.location.search);
      const userId = urlParams.get('userId');
      
      if (userId) {
        // Find the user in the tickets array
        const user = ticketUsersArray.find(user => user.id.toString() === userId);
        
        if (user) {
          // Populate the form with the user's data
          openPopupWithData(user);
        }
      }
    }
    
    // Run on page load
    checkUrlParams();
    
    // Open popup with user data if available
    function openPopupWithData(userData: User){
      // If user data is provided, populate the form
      if (userData) {
        ticketIdInput.value = userData.ticketId;
        nameInput.value = userData.name;
        emailInput.value = userData.email;
        numberOfTickets.textContent = "Cantidad invitados: "+userData.numberOfTickets;
        numberOfTicketsInput.value = userData.numberOfTickets;
        nameOfFamily.textContent = "Querid@s invitados "+ userData.name;
      } else {
        // Clear the form if no user data
        ticketForm.reset();
      }
      
      // Show the popup
      popup.classList.remove('hidden');
      
      // Focus on the first input
      nameInput.focus();
    }
    
    // Add click event listeners to all buy buttons
    buyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const ticketId = button.getAttribute('data-ticket-id');
        ticketIdInput.value = ticketId;
        
        // Check if there's a user in the URL params
        const urlParams = new URLSearchParams(window.location.search);
        const userId = urlParams.get('userId');
        
        if (userId) {
          const user = ticketUsersArray.find(user => user.id.toString() === userId);
          if (user) {
            openPopupWithData(user);
          } else {
            openPopupWithData();
          }
        } else {
          openPopupWithData();
        }
      });
    });
    
    // Close the popup when the close button is clicked
    closeBtn.addEventListener('click', () => {
      popup.classList.add('hidden');
      
      // Clear URL parameters if they exist
      const url = new URL(window.location);
      if (url.searchParams.has('userId')) {
        url.searchParams.delete('userId');
        window.history.replaceState({}, '', url);
      }
    });
    
    // Handle form submission
    ticketForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const formData = {
        ticketId: parseInt(ticketIdInput.value),
        name: nameInput.value,
        email: emailInput.value,
        numberOfTickets: parseInt(numberOfTicketsInput.value)
      };
      
      // Check if we're updating an existing user
      const urlParams = new URLSearchParams(window.location.search);
      const userId = urlParams.get('userId');
      
      if (userId) {
        // Update existing user
        const userIndex = ticketUsersArray.findIndex(user => user.id.toString() === userId);
        
        if (userIndex !== -1) {
          ticketUsersArray[userIndex] = {
            ...ticketUsersArray[userIndex],
            ...formData
          };
          
          saveTicketUsers(ticketUsersArray);
          showSuccessMessage('Su confirmación ha sido realizada con éxito!');
        }
      } else {
        // Add new user
        const newUser = {
          id: ticketUsersArray.length > 0 ? Math.max(...ticketUsersArray.map(u => u.id)) + 1 : 1,
          ...formData
        };
        
        ticketUsersArray.push(newUser);
        saveTicketUsers(ticketUsersArray);
        showSuccessMessage('Ticket booked successfully!');
      }
      
      // Close the popup
      popup.classList.add('hidden');
      
      // Clear URL parameters if they exist
      const url = new URL(window.location);
      if (url.searchParams.has('userId')) {
        url.searchParams.delete('userId');
        window.history.replaceState({}, '', url);
      }
    });
    
    // Function to show a success message
    function showSuccessMessage(message) {
      // Create a success message element
      const successMessage = document.createElement('div');
      successMessage.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
      successMessage.textContent = message;
      
      // Add to the DOM
      document.body.appendChild(successMessage);
      
      // Remove after 3 seconds
      setTimeout(() => {
        successMessage.remove();
      }, 3000);
    }
  });
</script>

